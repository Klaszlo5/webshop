version: "3.8"

services:
  # Backend service (Node.js app)
  backend:
    build:
      context: ./  # Set the build context to the current directory (backend)
    container_name: webshop-backend
    ports:
      - "3000:3000"  # Expose port 3000 to the host machine
    environment:
      - DATABASE_URL=postgres://user:password@db:5432/webshop
      - PORT=3000
    depends_on:
      - db  # Ensure the db service is available before starting the backend
    volumes:
      - ./src:/app/src  # Sync the source code with the container
    networks:
      - webshop-network
    command: npm run dev  # Start the app in development mode with ts-node-dev

  # Frontend service (React app)
  frontend:
    build:
      context: ../frontend  # Build frontend from the frontend directory (outside backend folder)
    container_name: webshop-frontend
    ports:
      - "3001:3000"  # Expose React app on port 3001
    depends_on:
      - backend  # Ensure the backend service is up before starting frontend
    volumes:
      - ../frontend:/app  # Sync frontend source code with the container
    networks:
      - webshop-network
    command: npm start  # Start the React app

  # PostgreSQL Database service
  db:
    image: postgres:13  # Use the official PostgreSQL Docker image
    container_name: webshop-db
    environment:
      POSTGRES_DB: webshop  # Database name
      POSTGRES_USER: user  # Database user
      POSTGRES_PASSWORD: password  # Database password
    ports:
      - "5432:5432"  # Expose PostgreSQL port to the host
    volumes:
      - webshop-db-data:/var/lib/postgresql/data  # Persist database data
    networks:
      - webshop-network

networks:
  webshop-network:
    driver: bridge  # Use the default bridge network for communication between containers

volumes:
  webshop-db-data:  # Persist PostgreSQL data in a volume